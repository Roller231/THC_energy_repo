


import requests
from geopy.geocoders import Nominatim
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import psycopg2

from Bot.keyboards import confirm_address_keyboard

router = Router()

YANDEX_API_KEY = "4444140b-3c65-4196-99b2-8f4d51133969"

# —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DATABASE_URL = "postgresql://postgres:141722@localhost:5432/postgres"

# —Å–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn = psycopg2.connect(DATABASE_URL)
conn.autocommit = True

def save_complaint_to_db(tg_user_id, username, phone, user_address, complaint_text, complaint_address):
    with conn.cursor() as cur:
        cur.execute("""
            INSERT INTO complaints (tg_user_id, username, phone, user_address, complaint_text, complaint_address)
            VALUES (%s, %s, %s, %s, %s, %s)
        """, (tg_user_id, username, phone, user_address, complaint_text, complaint_address))


class ComplaintForm(StatesGroup):
    name = State()
    phone = State()
    user_address = State()
    complaint_text = State()
    complaint_locality = State()
    complaint_street = State()
    complaint_house = State()
    complaint_building = State()
    confirm_address = State()

def normalize_address(raw_address: str) -> str:
    replacements = {
        "–¥.": "–¥–æ–º",
        "–¥ ": "–¥–æ–º ",
        "—É–ª ": "—É–ª–∏—Ü–∞ ",
        "–≥ ": "–≥–æ—Ä–æ–¥ ",
        "/": " –∫–æ—Ä–ø—É—Å ",
    }
    for old, new in replacements.items():
        raw_address = raw_address.replace(old, new)

    if "—Ä–æ—Å—Å–∏—è" not in raw_address.lower():
        raw_address += ", –†–æ—Å—Å–∏—è"

    return raw_address.strip()


def check_address_yandex(address: str) -> (bool, str | None):
    try:
        print(f"üü° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Yandex: {address}")
        url = "https://geocode-maps.yandex.ru/1.x"
        params = {
            "apikey": YANDEX_API_KEY,
            "geocode": address,
            "format": "json",
            "lang": "ru_RU",
            "results": 1,
        }

        response = requests.get(url, params=params)
        response.raise_for_status()
        geo_obj = response.json()["response"]["GeoObjectCollection"]["featureMember"]
        if not geo_obj:
            print("üî¥ –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ø–Ω–¥–µ–∫—Å)")
            return False, None

        full_address = geo_obj[0]["GeoObject"]["metaDataProperty"]["GeocoderMetaData"]["text"]
        print(f"üü¢ –ù–∞–π–¥–µ–Ω–æ (Yandex): {full_address}")

        if "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π" or "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä" or "–≥–æ—Ä–æ–¥ –∫—Ä–∞—Å–Ω–æ–¥–∞—Ä" or "–≥.–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä" in full_address.lower():
            return True, full_address

        print("üî¥ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω, –Ω–æ –≤–Ω–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è")
        return False, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞ –Ø–Ω–¥–µ–∫—Å: {e}")
        return False, None


def check_address_nominatim(address: str) -> (bool, str | None):
    try:
        print(f"üü° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim: {address}")
        geolocator = Nominatim(user_agent="myapp")
        location = geolocator.geocode(address, timeout=10)
        if location is None:
            print("üî¥ –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (Nominatim)")
            return False, None

        full_address = location.address
        print(f"üü¢ –ù–∞–π–¥–µ–Ω–æ (Nominatim): {full_address}")

        if "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π" in full_address.lower():
            return True, full_address

        return False, None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–µ—Ä–∞ Nominatim: {e}")
        return False, None


@router.message(Command(commands=["start"]))
async def start_complaint(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ':", reply_markup=keyboard)
    await state.set_state(ComplaintForm.name)


@router.message(ComplaintForm.name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if name.lower() == "–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ":
        await state.update_data(name=None)
    else:
        await state.update_data(name=name)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)],
            [KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ':", reply_markup=keyboard)
    await state.set_state(ComplaintForm.phone)


@router.message(ComplaintForm.phone)
async def process_phone(message: Message, state: FSMContext):
    if message.contact:
        await state.update_data(phone=message.contact.phone_number)
    elif message.text.lower().strip() == "–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ":
        await state.update_data(phone=None)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ'.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ComplaintForm.user_address)


@router.message(ComplaintForm.user_address)
async def process_user_address(message: Message, state: FSMContext):
    await state.update_data(user_address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã:")
    await state.set_state(ComplaintForm.complaint_text)


@router.message(ComplaintForm.complaint_text)
async def process_complaint_text(message: Message, state: FSMContext):
    await state.update_data(complaint_text=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–≥–æ—Ä–æ–¥, —Å–µ–ª–æ, —Å—Ç–∞–Ω–∏—Ü–∞):")
    await state.set_state(ComplaintForm.complaint_locality)


@router.message(ComplaintForm.complaint_locality)
async def process_complaint_locality(message: Message, state: FSMContext):
    await state.update_data(complaint_locality=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É:")
    await state.set_state(ComplaintForm.complaint_street)


@router.message(ComplaintForm.complaint_street)
async def process_complaint_street(message: Message, state: FSMContext):
    await state.update_data(complaint_street=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:")
    await state.set_state(ComplaintForm.complaint_house)


@router.message(ComplaintForm.complaint_house)
async def process_complaint_house(message: Message, state: FSMContext):
    await state.update_data(complaint_house=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–ø—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' –µ—Å–ª–∏ –Ω–µ—Ç:")
    await state.set_state(ComplaintForm.complaint_building)


@router.message(ComplaintForm.complaint_building)
async def process_complaint_building(message: Message, state: FSMContext):
    data = await state.get_data()
    building = message.text.strip()
    await state.update_data(complaint_building=building)

    parts = [
        data["complaint_street"],
        f"–¥–æ–º {data['complaint_house']}",
        data["complaint_locality"]
    ]
    if building and building != "-":
        parts.append(f"–∫–æ—Ä–ø—É—Å {building}")

    full_input = ", ".join(parts)
    formatted_address = normalize_address(full_input)

    is_valid, full_address = check_address_yandex(formatted_address)
    if not is_valid:
        is_valid, full_address = check_address_nominatim(formatted_address)

    if not is_valid:
        await message.answer(
            "‚ùó –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–º—É –∫—Ä–∞—é.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Å–Ω–æ–≤–∞ —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º.\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —É–ª–∏—Ü—É –∏ –¥–æ–º (–∏ –∫–æ—Ä–ø—É—Å, –µ—Å–ª–∏ –µ—Å—Ç—å)."
        )
        await state.set_state(ComplaintForm.complaint_locality)
        return

    await state.update_data(complaint_address=full_address)

    await message.answer(
        f"–í—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –∂–∞–ª–æ–±—ã:\n<b>{full_address}</b>\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=confirm_address_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(ComplaintForm.confirm_address)


@router.callback_query(F.data.startswith("address_confirm_"))
async def handle_address_confirmation(callback: CallbackQuery, state: FSMContext):
    if callback.data == "address_confirm_yes":
        data = await state.get_data()
        name = data.get("name") or "–ê–Ω–æ–Ω–∏–º"
        phone = data.get("phone") or "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        save_complaint_to_db(
            tg_user_id=callback.from_user.id,
            username=name,
            phone=phone,
            user_address=data['user_address'],
            complaint_text=data['complaint_text'],
            complaint_address=data['complaint_address']
        )

        summary = (
            f"–ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Tg ID: {callback.from_user.id}\n"
            f"–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data['user_address']}\n"
            f"–ñ–∞–ª–æ–±–∞: {data['complaint_text']}\n"
            f"–ê–¥—Ä–µ—Å –∂–∞–ª–æ–±—ã: {data['complaint_address']}"
        )

        await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n" + summary)
        await state.clear()

    elif callback.data == "address_confirm_no":
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∂–∞–ª–æ–±—ã –∑–∞–Ω–æ–≤–æ:")
        await state.set_state(ComplaintForm.complaint_locality)

    await callback.answer()


